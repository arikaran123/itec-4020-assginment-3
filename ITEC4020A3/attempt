import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class WebSearch {

    public static void main(String[] args) throws IOException {
        // Define the path to the folder containing the web documents
        String folderPath = "C:\\Users\\Zenbook\\Desktop\\dataset\\data\\WT01\\B01";

        // Create a map to store the index for each document
        Map<String, Map<String, Integer>> documentIndexMap = new HashMap<>();

        // Loop over each file in the folder and create an index for each document
        File folder = new File(folderPath);
        for (File file : folder.listFiles()) {
            Map<String, Integer> index = new HashMap<>();
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] tokens = line.split("\\s+");
                    for (String token : tokens) {
                        token = token.replaceAll("[^a-zA-Z]", "").toLowerCase();
                        if (!token.isEmpty()) {
                            int count = index.getOrDefault(token, 0);
                            index.put(token, count + 1);
                        }
                    }
                }
            }
            documentIndexMap.put(file.getName(), index);
        }

        // Define the list of queries/topics to search for
        String[] queries = { //instert searches here// };

    
        for (int i = 0; i < queries.length; i++) {
            String query = queries[i];
            Set<String> relevantDocumentIds = new HashSet<>();
            Map<String, Double> documentScores = new HashMap<>();
            for (Map.Entry<String, Map<String, Integer>> entry : documentIndexMap.entrySet()) {
                String documentId = entry.getKey();
                Map<String, Integer> index = entry.getValue();
                double score = getDocumentScore(query, index);
                if (score > 0) {
                    relevantDocumentIds.add(documentId);
                    documentScores.put(documentId, score);
                }
            }
            System.out.println("Query " + (i+1) + ": " + query);
            int rank = 1;
            for (Map.Entry<String, Double> entry : sortByValueDescending(documentScores).entrySet()) {
                String documentId = entry.getKey();
                double score = entry.getValue();
                System.out.println((i+1) + " Q0 " + documentId + " " + rank + " "
